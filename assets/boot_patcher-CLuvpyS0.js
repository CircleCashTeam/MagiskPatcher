(function(){"use strict";importScripts("/MagiskPatcher/magiskboot.js");function a(s){self.postMessage({type:"response",data:s})}function r(s){self.postMessage({type:"error",data:s})}function h(s){self.postMessage({type:"command",data:s})}self.onmessage=async function(s){const{apkBuffer:A,bootBuffer:E,needed:k,metadata:n}=s.data;console.log("Worker with options:",n);const i=await magiskboot({noInitialRun:!0,print:e=>{e.trim()},printErr:e=>h(e),locateFile:e=>"/MagiskPatcher/magiskboot.wasm"});function $(e,o){i.ccall("setenv","number",["string","string","number"],[e,o,1])}function c(e){return i.FS.analyzePath(e,!1).exists}function u(e,o){if(c(o)){const p=i.FS.readFile(o);i.FS.writeFile(e,p)}}function S(e,o){for(const p in e.split(`
`)){if(p.includes("=")){const F=p.trim().split("=");if(F[0]===o)return F[1]}return null}}for(const e in n.env)a(`Setup environment key: ${e} value: ${n.env[e]}`),$(e.toString(),n.env[e]);const t="/home/web_user";a("Chdir: "+t),i.FS.chdir(t),a(`Write boot image into emscripiten FS: ${t}/boot.img`),i.FS.writeFile(`${t}/boot.img`,new Uint8Array(E));for(const e in k){a(`Write file into emscripten FS: ${e} -> ${t}/${e}`);const o=new Uint8Array(k[e]);i.FS.writeFile(`${t}/${e}`,o)}let l=0;switch(a("- Unpacking boot image"),l=i.callMain(["unpack","boot.img"]),l){case 0:break;case 1:r("! Unsupported/Unknown image format");break;case 2:r("! Web unsupport ChromeOS boot image");break;default:r("! Unable to unpack boot image");break}a("- Checking ramdisk status");let m=0,f="";c("ramdisk.cpio")?(m=i.callMain(["cpio","ramdisk.cpio","test"]),f=""):(m=0,f="#");let d="";switch(m){case 0:a("- Stock boot image detected"),i.callMain(["sha1","boot.img"]),u(`${t}/ramdisk.cpio.orig`,`${t}/ramdisk.cpio`);break;case 1:a("- Magisk patched boot image detected"),i.callMain(["cpio","ramdisk.cpio","extract .backup/.magisk config.orig","restore"]),u(`${t}/ramdisk.cpio.orig`,`${t}/ramdisk.cpio`);break;case 2:a("! Boot image patched by unsupported programs"),r("! Please restore back to stock boot image");break}if(c("config.orig")){i.FS.chmod("config.orig",420);const e=i.FS.readFile("config.orig",{encoding:"utf8"});d=S(e,"SHA1"),console.log("SHA1 from origin config:",d),i.FS.unlink("config.orig")}a("- Patching ramdisk");let b=[];for(const e of["magisk","magisk32","magisk64","stub.apk","init-ld"])console.log("Try compress",e),c(e)&&(a(`Compress ${e} info xz...`),i.callMain(["compress=xz",e,`${e}.xz`]),b.push(`add 0644 overlay.d/sbin/${e}.xz ${e}.xz`));let g="";g+=`KEEPVERITY=${n.env.KEEPVERITY}
`,g+=`KEEPFORCEENCRYPT=${n.env.KEEPFORCEENCRYPT}
`,g+=`RECOVERYMODE=${n.env.RECOVERYMODE}
`,d.length!=0&&(g+=`SHA1=${d}
`),console.log("Generated magisk config",g),i.FS.writeFile(`${t}/config`,g,{encoding:"utf8"}),l=i.callMain(["cpio","ramdisk.cpio","add 0750 init magiskinit","mkdir 0750 overlay.d","mkdir 0750 overlay.d/sbin",...b,"patch",`${f} backup ramdisk.cpio.orig`,"mkdir 000 .backup","add 000 .backup/.magisk config"]),l!=0&&r("! Unable to patch ramdisk");for(const e of["dtb","kernel_dtb","extra"])c(`${t}/${e}`)&&(i.callMain(["dtb",e,"test"])!=0&&(a(`! Boot image ${e} was patched by old (unsupported) Magisk`),r("! Please try again with *unpatched* boot image")),i.callMain(["dtb",e,"patch"])==0&&a(`- Patch fstab in boot image ${e}`));if(c(`${t}/kernel`)){let e=!1;i.callMain(["hexpatch","kernel","49010054011440B93FA00F71E9000054010840B93FA00F7189000054001840B91FA00F7188010054","A1020054011440B93FA00F7140020054010840B93FA00F71E0010054001840B91FA00F7181010054"])==0&&(e=!0),i.callMain(["hexpatch","kernel","821B8012","E2FF8F12"])==0&&(e=!0),i.callMain(["hexpatch","kernel","70726F63615F636F6E66696700","70726F63615F6D616769736B00"])==0&&(e=!0),n.env.LEGACYSAR=="true"&&i.callMain(["hexpatch","kernel","736B69705F696E697472616D667300","77616E745F696E697472616D667300"])==0&&(e=!0),e||i.FS.unlink(`${t}/kernel`)}l=i.callMain(["repack","boot.img"]),l!=0&&r("! Unable to repack boot image");const M=i.FS.readFile(`${t}/new-boot.img`);this.postMessage({type:"done",data:M})}})();
